{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JustinKotics/kotics/blob/master/Options%20Pricing\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I43E9iP54E5l"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e9uvIk3QlF7o"
      },
      "source": [
        "# **GWP1**\n",
        "\n",
        "**Team :**\n",
        "\n",
        "* Emanuele Bolognesi\n",
        "* Justine Okot\n",
        "* Luke Tetteh\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b91RkorUloy2"
      },
      "source": [
        "## **Step 1**\n",
        "\n",
        "1. Yes.\n",
        "According to Investopedia, put-call parity is a principle of options pricing theory that applies to European options. It establishes that the price of a call option indicates a fair price for the corresponding put option, having the same expiration date and strike price, and vice versa. Therefore, put-call parity refers to the relationship between the prices of call and put options of the same class, such that buying a call option and selling a put option at the same time would result in a riskless profit equal to the present value of the exercise price (Investopedia, n.d.).\n",
        "In the binomial tree model, put-call parity can be used to determine the price of one option given the price of the other option. This model is a mathematical tool used to calculate the value of an option over time, based on the assumption that prices can either go up or down with a certain probability, and that there are no arbitrage opportunities (Investopedia, n.d.; Hull, 2018).\n",
        "\n",
        "\n",
        "2. The equation for put-call parity can be rearranged to calculate the price of a European call option as follows:\n",
        "\n",
        "C = P + S - PV(x)\n",
        "\n",
        "In this formula, C represents the price of the call option, P represents the price of the put option, S represents the spot price or current market value of the underlying asset, and PV(x) represents the present value of the strike price (x) discounted from the expiration date to the present at the risk-free rate.\n",
        "\n",
        "\n",
        "3. To obtain the put price by using the Put-Call Parity equation, we can reorganize it as: \n",
        "\n",
        "P = C + PV(x) - S. \n",
        "\n",
        "Here, P refers to the European put option price, C represents the European call option price, PV(x) is the strike price discounted at the risk-free rate, and S stands for the current market value of the underlying asset. This equation is useful in the binomial tree model to calculate the price of a European put option given the call option price, present value of the strike price, and spot price of the underlying asset.\n",
        "\n",
        "4. No.\n",
        "According to CME Group, put-call parity does not apply to American options because they can be exercised before the expiry date (CME Group). This flexibility gives the holder of an American option more value than a holder of a European option, which can only be exercised on the expiry date (CME Group).\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UoL5Jyzy3aYS"
      },
      "source": [
        "###Team Member A"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "39BRztyc3nmR"
      },
      "source": [
        "5. Price an ATM European call and put using a binomial tree:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EYVLrfCpvuEm"
      },
      "outputs": [],
      "source": [
        "# Given parameters\n",
        "S0 = 100\n",
        "r = 0.05\n",
        "sigma = 0.2\n",
        "T = 3 / 12\n",
        "K = S0 # option ATM"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6yWVWkSetbRi"
      },
      "outputs": [],
      "source": [
        "def binomial_option(S_ini, K, T, r, sigma, N, is_call):\n",
        "    dt = T / N  # Define time step\n",
        "    u = np.exp(sigma * np.sqrt(dt))\n",
        "    d = np.exp(-sigma * np.sqrt(dt))\n",
        "    p = (np.exp(r * dt) - d) / (u - d)  # Risk neutral probs\n",
        "    prices = np.zeros([N + 1, N + 1])  # option prices\n",
        "    S = np.zeros([N + 1, N + 1])  # Underlying price\n",
        "    Delta = np.zeros([N, N])  # delta\n",
        "    for i in range(0, N + 1):\n",
        "      if is_call:\n",
        "        prices[N, i] = max(S_ini * (u ** (i)) * (d ** (N - i)) - K, 0)\n",
        "      else:\n",
        "        prices[N, i] = max(K - (S_ini * (u ** (i)) * (d ** (N - i))), 0)\n",
        "      S[N, i] = S_ini * (u ** (i)) * (d ** (N - i))\n",
        "    for j in range(N - 1, -1, -1):\n",
        "        for i in range(0, j + 1):\n",
        "            prices[j, i] = np.exp(-r * dt) * (p * prices[j + 1, i + 1] + (1 - p) * prices[j + 1, i])\n",
        "            S[j, i] = S_ini * (u ** (i)) * (d ** (j - i))\n",
        "            Delta[j, i] = (prices[j + 1, i + 1] - prices[j + 1, i]) / (\n",
        "                S[j + 1, i + 1] - S[j + 1, i]\n",
        "            )\n",
        "    return prices[0, 0], prices, S, Delta"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "oTCWP2GSw0AW",
        "outputId": "aea4ed49-3b44-4ea4-c8c3-701a45a33e25"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "With N =   2, the price is 4.16\n",
            "With N =   5, the price is 4.81\n",
            "With N =  10, the price is 4.52\n",
            "With N =  50, the price is 4.60\n",
            "With N = 100, the price is 4.61\n",
            "With N = 300, the price is 4.61\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Call price')"
            ]
          },
          "metadata": {},
          "execution_count": 211
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "nvec = [2, 5, 10, 50, 100, 300]\n",
        "call_prices = []\n",
        "for N in nvec:\n",
        "  call_price, _, _, call_delta = binomial_option(S0, K, T, r, sigma, N, True)\n",
        "  call_prices.append(call_price)\n",
        "  print(\"With N = {:3d}, the price is {:.2f}\".format(N, call_price))\n",
        "plt.plot(nvec, call_prices)\n",
        "plt.xlabel('N')\n",
        "plt.ylabel('Call price')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "yHVbD3j9zgCX",
        "outputId": "aa0706e6-800f-478e-ddda-06922212920a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "With N =   2, the price is 2.92\n",
            "With N =   5, the price is 3.57\n",
            "With N =  10, the price is 3.27\n",
            "With N =  50, the price is 3.35\n",
            "With N = 100, the price is 3.36\n",
            "With N = 300, the price is 3.37\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Put price')"
            ]
          },
          "metadata": {},
          "execution_count": 212
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "put_prices = []\n",
        "for N in nvec:\n",
        "  put_price, _, _, put_delta = binomial_option(S0, K, T, r, sigma, N, False)\n",
        "  put_prices.append(put_price)\n",
        "  print(\"With N = {:3d}, the price is {:.2f}\".format(N, put_price))\n",
        "plt.plot(nvec, put_prices)\n",
        "plt.xlabel('N')\n",
        "plt.ylabel('Put price')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aYbCHwoe1V-v",
        "outputId": "36b827e6-c8ca-415e-c47e-77bb2d90e0ed"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-------------+--------+\n",
            "|   Option    |  Price |\n",
            "+-------------+--------+\n",
            "|   Call      | 4.61  |\n",
            "+-------------+--------+\n",
            "|   Put       | 3.36  |\n",
            "+-------------+--------+\n"
          ]
        }
      ],
      "source": [
        "# Choose N = 100\n",
        "N = 100\n",
        "call_price, _, _, call_delta = binomial_option(S0, K, T, r, sigma, N, True)\n",
        "put_price, _, _, put_delta = binomial_option(S0, K, T, r, sigma, N, False)\n",
        "# Print the output in tabular format\n",
        "print(\"+-------------+--------+\")\n",
        "print(\"|   Option    |  Price |\")\n",
        "print(\"+-------------+--------+\")\n",
        "print(\"|   Call      | {:.2f}  |\".format(call_price))\n",
        "print(\"+-------------+--------+\")\n",
        "print(\"|   Put       | {:.2f}  |\".format(put_price))\n",
        "print(\"+-------------+--------+\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zHUv6S5q17o1",
        "outputId": "6700d59e-3af6-482c-ee8b-9fb09947a27e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Put-call parity is satisfied: True\n"
          ]
        }
      ],
      "source": [
        "# Check put-call parity\n",
        "left = call_price + K * np.exp(-r * T)\n",
        "right = put_price + S0\n",
        "print(f'Put-call parity is satisfied: {round(left, 2) == round(right, 2)}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "np9wv9t53s3T"
      },
      "source": [
        "6. Compute the Greek Delta for the European call and European put at time 0:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4PQTCgpz30KH",
        "outputId": "4bef8d15-7fe1-4799-eea6-76ef91bd8102"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-------------------+--------+\n",
            "|      Option       |  Delta |\n",
            "+-------------------+--------+\n",
            "| Call at time 0    | 0.57   |\n",
            "+-------------------+--------+\n",
            "| Put at time 0     | -0.43  |\n",
            "+-------------------+--------+\n"
          ]
        }
      ],
      "source": [
        "# Print the output in tabular format\n",
        "print(\"+-------------------+--------+\")\n",
        "print(\"|      Option       |  Delta |\")\n",
        "print(\"+-------------------+--------+\")\n",
        "print(\"| Call at time 0    | {:.2f}   |\".format(call_delta[0, 0]))\n",
        "print(\"+-------------------+--------+\")\n",
        "print(\"| Put at time 0     | {:.2f}  |\".format(put_delta[0, 0]))\n",
        "print(\"+-------------------+--------+\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jnYuvF0V3x7z"
      },
      "source": [
        "**7.** \n",
        "\n",
        " **a.** *Compute the sensitivity of previous put and call option prices to a 5% increase in volatility (from 20% to 25%). How do prices change with respect to the change in volatility?*\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fnSDh28930sb",
        "outputId": "99204200-dd1d-470b-d9a5-ab6d208d12b7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----------------+----------+\n",
            "|Option Price     | Increase |\n",
            "+-----------------+----------+\n",
            "|Call             |  21.30%  |\n",
            "|Put              |  29.17% |\n",
            "+-----------------+----------+\n"
          ]
        }
      ],
      "source": [
        "sigma1 = 0.25\n",
        "call_price1, _, _, _ = binomial_option(S0, K, T, r, sigma1, N, True)\n",
        "put_price1, _, _, _ = binomial_option(S0, K, T, r, sigma1, N, False)\n",
        "\n",
        "# Calculate the percentage increase\n",
        "call_price_increase = round((call_price1 - call_price) / call_price * 100, 2)\n",
        "put_price_increase = round((put_price1 - put_price) / put_price * 100, 2)\n",
        "\n",
        "# Print the output in tabular format\n",
        "print(\"+-----------------+----------+\")\n",
        "print(\"|Option Price     | Increase |\")\n",
        "print(\"+-----------------+----------+\")\n",
        "print(\"|Call             |  {:.2f}%  |\".format(call_price_increase))\n",
        "print(\"|Put              |  {:.2f}% |\".format(put_price_increase))\n",
        "print(\"+-----------------+----------+\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NhiNtYGa1QzI"
      },
      "source": [
        "###**Team Member B**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yURiMwPBcNnC"
      },
      "source": [
        "#Q 8\n",
        "\n",
        "a) N = 100\n",
        "\n",
        "b) The appropriate number of steps in the tree is chosen by examining the convergence of the option prices as N increases.\n",
        "N=100 is chosen because both the put prices and call prices converge to stable values as N approaches 100.\n",
        "See the plots below;\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EYVnRlA9n-KM"
      },
      "outputs": [],
      "source": [
        "def american_option(S_ini, K, T, r, sigma, N, opttype):\n",
        "    dt = T / N  # Define time step\n",
        "    u = np.exp(sigma * np.sqrt(dt))  # Define u\n",
        "    d = np.exp(-sigma * np.sqrt(dt))  # Define d\n",
        "    p = (np.exp(r * dt) - d) / (u - d)  # risk neutral probs\n",
        "    C = np.zeros([N + 1, N + 1])  # call prices\n",
        "    S = np.zeros([N + 1, N + 1])  # underlying price\n",
        "    Delta = np.zeros([N + 1, N + 1])  # delta\n",
        "\n",
        "    for i in range(0, N + 1):\n",
        "        S[N, i] = S_ini * (u ** (i)) * (d ** (N - i))\n",
        "        if opttype == \"C\":\n",
        "            C[N, i] = max(S[N, i] - K, 0)\n",
        "        else:\n",
        "            C[N, i] = max(K - S[N, i], 0)\n",
        "\n",
        "    for j in range(N - 1, -1, -1):\n",
        "        for i in range(0, j + 1):\n",
        "            C[j, i] = np.exp(-r * dt) * (\n",
        "                p * C[j + 1, i + 1] + (1 - p) * C[j + 1, i]\n",
        "            )  # Computing the European option prices\n",
        "            S[j, i] = (\n",
        "                S_ini * (u ** (i)) * (d ** (j - i))\n",
        "            )  # Underlying evolution for each node\n",
        "            if opttype == \"C\":\n",
        "                C[j, i] = max(\n",
        "                    C[j, i], S[j, i] - K\n",
        "                )  # Decision between the European option price and the payoff from early-exercise\n",
        "            else:\n",
        "                C[j, i] = max(\n",
        "                    C[j, i], K - S[j, i]\n",
        "                )  # Decision between the European option price and the payoff from early-exercise\n",
        "            Delta[j, i] = (C[j + 1, i + 1] - C[j + 1, i]) / (\n",
        "                S[j + 1, i + 1] - S[j + 1, i]\n",
        "            )  # Computing the delta for each node\n",
        "\n",
        "    return C[0, 0], C, S, Delta\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "vxg-pZ2aVs4f",
        "outputId": "ca97fb65-7520-4ccf-847a-44c8e91337e2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "With N =   1, the price is 5.59\n",
            "With N =  10, the price is 4.52\n",
            "With N =  20, the price is 4.57\n",
            "With N =  50, the price is 4.60\n",
            "With N =  60, the price is 4.60\n",
            "With N =  80, the price is 4.60\n",
            "With N =  90, the price is 4.60\n",
            "With N = 100, the price is 4.61\n",
            "With N = 200, the price is 4.61\n",
            "With N = 300, the price is 4.61\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Testing the function with different N values\n",
        "N_vec = [1, 10, 20, 50, 60, 80, 90, 100, 200, 300]\n",
        "price_array = []\n",
        "for N in N_vec:\n",
        "    Amcall_price, C, S, Delta = american_option(S0, K, T, r, sigma, N, \"C\")\n",
        "    price_array.append(Amcall_price)\n",
        "    print(\"With N = {:3d}, the price is {:.2f}\".format(N, Amcall_price))\n",
        "\n",
        "# Plotting the results\n",
        "plt.plot(N_vec, price_array)\n",
        "plt.xlabel(\"N\")\n",
        "plt.ylabel(\"American Call Price\")\n",
        "plt.title(\"American Call price vs N\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "sPmLxgi6XpPz",
        "outputId": "48a0c70c-8b5f-469c-bdb0-fc16a985d3e0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "With N =   1, the price is 4.34\n",
            "With N =  10, the price is 3.43\n",
            "With N =  20, the price is 3.45\n",
            "With N =  50, the price is 3.47\n",
            "With N = 100, the price is 3.47\n",
            "With N = 200, the price is 3.48\n",
            "With N = 300, the price is 3.48\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "price_array = []\n",
        "N_vec = [1, 10, 20, 50, 100, 200, 300]\n",
        "for N in N_vec:\n",
        "    Amput_price, C, S, Delta = american_option(S0, K, T, r, sigma, N, \"P\")\n",
        "    price_array.append(Amput_price)\n",
        "    print(\"With N = {:3d}, the price is {:.2f}\".format(N, Amput_price))\n",
        "    \n",
        "plt.plot(N_vec, price_array)\n",
        "plt.xlabel(\"N\")\n",
        "plt.ylabel(\"American Put Price\")\n",
        "plt.title(\"American Put price vs N\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6J8w5wGPbu_9",
        "outputId": "0b6605e9-2c2a-49ca-df23-a80d9d9ca1f0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Call price: 4.61\n",
            "Put price: 3.47\n"
          ]
        }
      ],
      "source": [
        "# Choose N = 100\n",
        "N = 100\n",
        "Amcall_price, C, S ,Delta = american_option(S0, K, T, r, sigma, N, \"C\")\n",
        "Amput_price, P, S, Delta = american_option(S0, K, T, r, sigma, N, \"P\")\n",
        "print('Call price: {:.2f}'.format(Amcall_price))\n",
        "print('Put price: {:.2f}'.format(Amput_price))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p065RT9MjQl9",
        "outputId": "46eb286c-5d0b-4323-c97e-545ab3d1cd27"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Put-call parity for american options is satisfied: False\n"
          ]
        }
      ],
      "source": [
        "# Check put-call parity\n",
        "left = Amcall_price + K * np.exp(-r * T)\n",
        "right = Amput_price + S0\n",
        "print(f'Put-call parity for american options is satisfied: {round(left, 2) == round(right, 2)}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x2w6HMuOlt8m"
      },
      "source": [
        "#Q 9\n",
        "\n",
        "a)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aFznOJzEp5h2"
      },
      "outputs": [],
      "source": [
        "Amcall_price, C, S, Call_Delta = american_option(S0, K, T, r, sigma, N, \"C\")\n",
        "Amput_price, P, S, Put_Delta = american_option(S0, K, T, r, sigma, N, \"P\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nq6AJ2-dqkdE",
        "outputId": "04bf61ba-7fd2-4262-acf3-9961a28a7060"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Delta of the American call option: 0.57\n"
          ]
        }
      ],
      "source": [
        "#Compute the Greek Delta for the American call\n",
        "print(f\"Delta of the American call option: {Call_Delta[0,0]:.2f}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8xg1dPuUsaEg",
        "outputId": "f65fd486-30dc-4af3-a790-fd0347cfb687"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Delta of the American put option: -0.45\n"
          ]
        }
      ],
      "source": [
        "#Compute the Greek Delta for the American put\n",
        "print(f\"Delta of the American put option: {Put_Delta[0,0]:.2f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cwVWk-Pus_MA"
      },
      "source": [
        "b) The delta value for the American call option is greater than that of the American put option, which implies that the call option is more responsive to variations in the underlying asset price than the put option. Thus, for a given change in the price of the underlying asset, the call option would yield greater profits or losses than the put option."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6UHVvAY4tgjB"
      },
      "source": [
        "The American call option has a delta of `0.57`, which indicates that for every `$1` increase in the underlying asset price, the option price is expected to increase by `$0.57`. Conversely, the American put option has a delta of `-0.45`, which suggests that for every `$1` increase in the underlying asset price, the option price is expected to decrease by `$0.45`.\n",
        "\n",
        "It's worth noting that delta values are positive for call options and negative for put options. Delta serves as a measure of the sensitivity of the option price to changes in the underlying asset price. Positive delta values indicate that the option is expected to increase in value as the asset price increases, while negative delta values indicate the opposite.\n",
        "\n",
        "Obtaining a positive or negative delta for each option is crucial for traders to hedge their positions by buying or selling the underlying asset.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EdGG45fdy4_i"
      },
      "source": [
        "# Q10\n",
        "\n",
        "a)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Afu7uReu6EZW",
        "outputId": "03c9bbea-a4e2-4038-fc46-dc62c2ead52d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Call price increased by 21.30% with a 5% increase in volatility\n",
            "Put price increased by 28.15% with a 5% increase in volatility\n"
          ]
        }
      ],
      "source": [
        "# Compute option prices with initial volatility\n",
        "sigma_20 = 0.20\n",
        "Amcall_price_20, C, S, Delta_20 = american_option(S0, K, T, r, sigma_20, N, \"C\")\n",
        "Amput_price_20, P, S, Delta_20 = american_option(S0, K, T, r, sigma_20, N, \"P\")\n",
        "\n",
        "# Compute option prices with increased volatility\n",
        "sigma_25 = 0.25\n",
        "Amcall_price_25, C1, S1, Delta_25 = american_option(S0, K, T, r, sigma_25, N, \"C\")\n",
        "Amput_price_25, P1, S1, Delta_25 = american_option(S0, K, T, r, sigma_25, N, \"P\")\n",
        "\n",
        "# Compute the percentage change in option prices\n",
        "call_price_pct_change = (Amcall_price_25 - Amcall_price_20) / Amcall_price_20 * 100\n",
        "put_price_pct_change = (Amput_price_25 - Amput_price_20) / Amput_price_20 * 100\n",
        "\n",
        "# Print the results\n",
        "print(f\"Call price increased by {call_price_pct_change:.2f}% with a 5% increase in volatility\")\n",
        "print(f\"Put price increased by {put_price_pct_change:.2f}% with a 5% increase in volatility\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "67pDI5ok_CEV"
      },
      "source": [
        "b) The results show that a 5% increase in volatility has a greater impact on the price of a put option than on the price of a call option.\n",
        "\n",
        "Specifically, the percentage increase in the put price (28.15%) is greater than that of the call price (21.30%). This is because put options give the holder the right to sell the underlying asset at the strike price, and an increase in volatility increases the likelihood of the asset's price falling below the strike price. As a result, the put option becomes more valuable as volatility increases, leading to a larger percentage increase in price.\n",
        "\n",
        "In contrast, call options give the holder the right to buy the underlying asset at the strike price, and an increase in volatility increases the likelihood of the asset's price rising above the strike price. Although this increases the potential profit for the call holder, it does not necessarily increase the probability of the option finishing in-the-money. Therefore, the percentage increase in the call price is smaller than that of the put price."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0ry2xRTtNllE"
      },
      "source": [
        "### **Graphs and Confirmations**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HZMg7c1FN6Ua"
      },
      "source": [
        "**Q11.**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0bqTdLrMN2Px",
        "outputId": "81f6ea2e-0f42-4c25-804b-8959f1e1e9b6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Question 11\n",
            "C + Ke^(-rT) = 103.36\n",
            "P + S = 103.36\n",
            "Put-call parity exists for European options\n"
          ]
        }
      ],
      "source": [
        "print(\"Question 11\")\n",
        "\n",
        "# Left side & right side of the put-call parity\n",
        "LS = (call_price + K*np.exp(-r*T)).round(2)\n",
        "RS = (put_price + S0).round(2)\n",
        "\n",
        "print(f'C + Ke^(-rT) = {LS}\\nP + S = {RS}')\n",
        "\n",
        "if LS == RS:\n",
        "  print('Put-call parity exists for European options')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vwDhbvhTNv5z",
        "outputId": "c4a758c7-beec-43dd-fc31-8fe17401309d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Question 12\n",
            "Put-call parity does not apply for American options\n"
          ]
        }
      ],
      "source": [
        "print (\"Question 12\")\n",
        "print(\"Put-call parity does not apply for American options\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "76h-kbs-BUFt",
        "outputId": "70946f19-998e-4710-d847-e5068fc10de6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Question 13\n",
            "American Call : 4.61 = European Call : 4.61\n"
          ]
        }
      ],
      "source": [
        "print('Question 13')\n",
        "print(f'American Call : {Amcall_price.round(2)} = European Call : {call_price.round(2)}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KB1zLs7CBf8t",
        "outputId": "cca5ae88-5641-4fcf-f5a9-aaa8de48a82e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Question 14\n",
            "American Put : 3.47 > European Put : 3.36\n"
          ]
        }
      ],
      "source": [
        "print('Question 14')\n",
        "print(f'American Put : {Amput_price.round(2)} > European Put : {put_price.round(2)}') "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qtdDGEuj3GPN"
      },
      "source": [
        "## Step 2"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7yu6IcRJI2mD"
      },
      "source": [
        "###Q15 \n",
        "a)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YhIQgEdNLrrN"
      },
      "outputs": [],
      "source": [
        "# Given parameters\n",
        "S0 = 100\n",
        "r = 0.05\n",
        "sigma = 0.2\n",
        "T = 3/12\n",
        "N = 5\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dHdo8DEECWvZ"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "def _gen_stock_vec(s0, sigma, nb, h):\n",
        "    up = np.exp(sigma * np.sqrt(2 * h))\n",
        "    down = 1 / up  # down movement to force a \"recombining tree\"\n",
        "\n",
        "    vec_u = up * np.ones(nb)\n",
        "    np.cumprod(vec_u, out=vec_u)  # Computing u, u^2, u^3....u^nb\n",
        "\n",
        "    vec_d = down * np.ones(nb)\n",
        "    np.cumprod(vec_d, out=vec_d)  # Computing d, d^2, d^3....d^nb\n",
        "\n",
        "    res = np.concatenate(\n",
        "        (vec_d[::-1], [1.0], vec_u)\n",
        "    )  # putting together the last period tree underlyings\n",
        "    res *= s0\n",
        "    return res\n",
        "\n",
        "def trinomial_tree_price(S0, K, T, r, sigma, N, opttype):\n",
        "    # Define parameters\n",
        "    h = T / N \n",
        "    discount = np.exp(-r * h)  # Define discount factor for simplicity later on\n",
        "\n",
        "    # Define risk-neutral probabilities:\n",
        "    pu = (\n",
        "        (np.exp(r * h / 2) - np.exp(-sigma * np.sqrt(h / 2)))\n",
        "        / (np.exp(sigma * np.sqrt(h / 2)) - np.exp(-sigma * np.sqrt(h / 2)))\n",
        "    ) ** 2\n",
        "    pd = (\n",
        "        (-np.exp(r * h / 2) + np.exp(sigma * np.sqrt(h / 2)))\n",
        "        / (np.exp(sigma * np.sqrt(h / 2)) - np.exp(-sigma * np.sqrt(h / 2)))\n",
        "    ) ** 2\n",
        "    pm = 1 - pu - pd\n",
        "\n",
        "    # Generate stock price tree    \n",
        "    s = _gen_stock_vec(S0, sigma, N, h)\n",
        "\n",
        "    # Define Payoff (in this case, European Call or Put Option)\n",
        "    if opttype == 'C':\n",
        "        final_payoff = np.maximum(s - K, 0)\n",
        "    elif opttype == 'P':        \n",
        "        final_payoff = np.maximum(K - s, 0)\n",
        "    else:\n",
        "        raise ValueError(\"Invalid option type! Choose either 'C' or 'P'.\")\n",
        "\n",
        "    nxt_vec_prices = final_payoff\n",
        "    \n",
        "    # Proceed with iterations for the calculation of payoffs\n",
        "    for i in range(1, N + 1):       \n",
        "        vec_stock = _gen_stock_vec(S0, sigma, N - i, h)\n",
        "        expectation = np.zeros(vec_stock.size)      \n",
        "\n",
        "        for j in range(expectation.size):\n",
        "            tmp = nxt_vec_prices[j] * pd\n",
        "            tmp += nxt_vec_prices[j + 1] * pm\n",
        "            tmp += nxt_vec_prices[j + 2] * pu\n",
        "\n",
        "            expectation[j] = tmp\n",
        "        # Discount option payoff!\n",
        "        nxt_vec_prices = discount * expectation\n",
        "    \n",
        "    return nxt_vec_prices[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rAyqkMeGCn8q"
      },
      "outputs": [],
      "source": [
        "# Define the strikes\n",
        "\n",
        "strikes = [120, 105, 100, 90, 70]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2FdtwlLXCpls"
      },
      "outputs": [],
      "source": [
        "# Calculate the option prices for call options\n",
        "call_prices = [trinomial_tree_price(S0, k, T, r, sigma, N, \"C\") for k in strikes]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7mKKFGXSCvzM"
      },
      "outputs": [],
      "source": [
        "# Calculate the option prices for put options\n",
        "put_prices = [trinomial_tree_price(S0, k, T, r, sigma, N, \"P\") for k in strikes]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tLSX5srJMQfa",
        "outputId": "a0cdb170-b627-402d-9239-ff7a46258847"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Put-call parity is satisfied for strike 120: True\n",
            "Put-call parity is satisfied for strike 105: True\n",
            "Put-call parity is satisfied for strike 100: True\n",
            "Put-call parity is satisfied for strike 90: True\n",
            "Put-call parity is satisfied for strike 70: True\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# Check put-call parity\n",
        "for k, call, put in zip(strikes, call_prices, put_prices):\n",
        "  left = call + k * np.exp(-r * T)\n",
        "  right = put + S0\n",
        "  print(f'Put-call parity is satisfied for strike {k}: {round(left, 2) == round(right, 2)}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YmOEBu83C4Y8",
        "outputId": "206490bb-f99b-4ee8-9375-fb357ad382da"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Call Option Prices:\n",
            "+-----------------------+---------+\n",
            "| Moneyness             |   Price |\n",
            "|-----------------------+---------|\n",
            "| Deep out of the money |    0.17 |\n",
            "| Out of the money      |    2.51 |\n",
            "| At the money          |    4.52 |\n",
            "| In the money          |   11.7  |\n",
            "| Deep in the money     |   30.87 |\n",
            "+-----------------------+---------+\n"
          ]
        }
      ],
      "source": [
        "from tabulate import tabulate\n",
        "\n",
        "# Define the option types and prices\n",
        "option_types = [\n",
        "    \"Deep out of the money\",\n",
        "    \"Out of the money\",\n",
        "    \"At the money\",\n",
        "    \"In the money\",\n",
        "    \"Deep in the money\"\n",
        "]\n",
        "option_prices = [\n",
        "    call_prices[0],\n",
        "    call_prices[1],\n",
        "    call_prices[2],\n",
        "    call_prices[3],\n",
        "    call_prices[4]\n",
        "]\n",
        "\n",
        "# Create a table with option types and prices\n",
        "table = [[\"Moneyness\", \"Price\"]]\n",
        "for option_type, price in zip(option_types, option_prices):\n",
        "    table.append([option_type, f\"{price:.2f}\"])\n",
        "\n",
        "# Print the table in tab format\n",
        "print(\"Call Option Prices:\")\n",
        "print(tabulate(table, headers=\"firstrow\", tablefmt=\"psql\"))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "goh-KeuvJid9"
      },
      "source": [
        "**Q15. b)**\n",
        "\n",
        "As we move from deep out of the money to deep in the money call options, we see a clear increasing trend in the prices. The prices rise as the options move from being out of the money to in the money. This trend makes sense because as an option becomes more in the money, the probability of it being profitable increases. Therefore, investors are willing to pay a higher price for options that have a higher chance of being profitable."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AhEXI9iOJj4R"
      },
      "source": [
        "**Q16. a)**\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TxqdCSk2Jvy8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "11f16565-6eea-44ac-962f-dab3cb310e94"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Put Option Prices:\n",
            "+-----------------------+---------+\n",
            "| Moneyness             |   Price |\n",
            "|-----------------------+---------|\n",
            "| Deep out of the money |    0    |\n",
            "| Out of the money      |    0.58 |\n",
            "| At the money          |    3.27 |\n",
            "| In the money          |    6.21 |\n",
            "| Deep in the money     |   18.68 |\n",
            "+-----------------------+---------+\n"
          ]
        }
      ],
      "source": [
        "from tabulate import tabulate\n",
        "\n",
        "# Define the option types and prices\n",
        "option_types = [\n",
        "    \"Deep out of the money\",\n",
        "    \"Out of the money\",\n",
        "    \"At the money\",\n",
        "    \"In the money\",\n",
        "    \"Deep in the money\"\n",
        "]\n",
        "option_prices = [\n",
        "    put_prices[4],\n",
        "    put_prices[3],\n",
        "    put_prices[2],\n",
        "    put_prices[1],\n",
        "    put_prices[0]\n",
        "]\n",
        "\n",
        "# Create a table with option types and prices\n",
        "table = [[\"Moneyness\", \"Price\"]]\n",
        "for option_type, price in zip(option_types, option_prices):\n",
        "    table.append([option_type, f\"{price:.2f}\"])\n",
        "\n",
        "# Print the table in tab format\n",
        "print(\"Put Option Prices:\")\n",
        "print(tabulate(table, headers=\"firstrow\", tablefmt=\"psql\"))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WwinK_tjbB1H"
      },
      "source": [
        "\n",
        "**Q16. b)**\n",
        "\n",
        "Similarly, for put options, we see a similar increasing trend in prices as we move from deep out of the money to deep in the money. This trend also makes sense because as a put option moves more in the money, the probability of it being profitable increases. As a result, the prices of in the money put options are higher than out of the money put options."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TYHIvdRBnLJg"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bSJgT17ljZbN"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "def _gen_stock_vec(s0, sigma, nb, h):\n",
        "    up = np.exp(sigma * np.sqrt(2 * h))\n",
        "    down = 1 / up  # down movement to force a \"recombining tree\"\n",
        "\n",
        "    vec_u = up * np.ones(nb)\n",
        "    np.cumprod(vec_u, out=vec_u)  # Computing u, u^2, u^3....u^nb\n",
        "\n",
        "    vec_d = down * np.ones(nb)\n",
        "    np.cumprod(vec_d, out=vec_d)  # Computing d, d^2, d^3....d^nb\n",
        "\n",
        "    res = np.concatenate(\n",
        "        (vec_d[::-1], [1.0], vec_u)\n",
        "    )  # putting together the last period tree underlyings\n",
        "    res *= s0\n",
        "    return res\n",
        "\n",
        "def trinomial_tree_price_american(S0, K, T, r, sigma, N, opttype):\n",
        "    # Define parameters\n",
        "    h = T / N \n",
        "\n",
        "    # Define risk-neutral probabilities:\n",
        "    pu = (\n",
        "        (np.exp(r * h / 2) - np.exp(-sigma * np.sqrt(h / 2)))\n",
        "        / (np.exp(sigma * np.sqrt(h / 2)) - np.exp(-sigma * np.sqrt(h / 2)))\n",
        "    ) ** 2\n",
        "    pd = (\n",
        "        (-np.exp(r * h / 2) + np.exp(sigma * np.sqrt(h / 2)))\n",
        "        / (np.exp(sigma * np.sqrt(h / 2)) - np.exp(-sigma * np.sqrt(h / 2)))\n",
        "    ) ** 2\n",
        "    pm = 1 - pu - pd\n",
        "\n",
        "    # Generate stock price tree\n",
        "    s = _gen_stock_vec(S0, sigma, N, h)\n",
        "\n",
        "    # Define Payoff (in this case, European Call or Put Option)\n",
        "    if opttype == 'C':\n",
        "        final_payoff = np.maximum(s - K, 0)\n",
        "    elif opttype == 'P':\n",
        "        final_payoff = np.maximum(K - s, 0)\n",
        "    else:\n",
        "        raise ValueError(\"Invalid option type! Choose either 'C' or 'P'.\")\n",
        "\n",
        "    nxt_vec_prices = final_payoff\n",
        "    \n",
        "    # Proceed with iterations for the calculation of payoffs\n",
        "    for i in range(1, N + 1):\n",
        "        vec_stock = _gen_stock_vec(S0, sigma, N - i, h)\n",
        "        expectation = np.zeros(vec_stock.size)      \n",
        "\n",
        "        for j in range(expectation.size):\n",
        "            tmp = nxt_vec_prices[j] * pd\n",
        "            tmp += nxt_vec_prices[j + 1] * pm\n",
        "            tmp += nxt_vec_prices[j + 2] * pu\n",
        "\n",
        "            expectation[j] = tmp\n",
        "        # Discount option payoff!\n",
        "        nxt_vec_prices = np.exp(-r * h) * expectation\n",
        "        if opttype == 'C':\n",
        "          nxt_vec_prices = np.maximum(vec_stock - K, nxt_vec_prices)\n",
        "        else:\n",
        "          nxt_vec_prices = np.maximum(K - vec_stock, nxt_vec_prices)\n",
        "    \n",
        "    return nxt_vec_prices[0]\n",
        "\n",
        "# Same parameters as Q15\n",
        "S0 = 100\n",
        "r = 0.05\n",
        "sigma = 0.2\n",
        "T = 3/12\n",
        "N = 5\n",
        "strikes = [120, 105, 100, 90, 70]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RQixPgSEiqHs"
      },
      "source": [
        "### Q17"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oBjfIhJ2ipD2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fc5b7037-0458-4513-88b1-47a1c6646f77"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----------------------------------+---------+\n",
            "| Option Type                      |   Price |\n",
            "+==================================+=========+\n",
            "| Deep out of the money call price |    0.17 |\n",
            "+----------------------------------+---------+\n",
            "| Out of the money call price      |    2.51 |\n",
            "+----------------------------------+---------+\n",
            "| At the money call price          |    4.52 |\n",
            "+----------------------------------+---------+\n",
            "| In the money call price          |   11.7  |\n",
            "+----------------------------------+---------+\n",
            "| Deep in the money call price     |   30.87 |\n",
            "+----------------------------------+---------+\n"
          ]
        }
      ],
      "source": [
        "from tabulate import tabulate\n",
        "\n",
        "american_call_prices = [trinomial_tree_price_american(S0, k, T, r, sigma, N, \"C\") for k in strikes]\n",
        "\n",
        "table_data = [\n",
        "    [\"Option Type\", \"Price\"],\n",
        "    [\"Deep out of the money call price\", f\"{american_call_prices[0]:.2f}\"],\n",
        "    [\"Out of the money call price\", f\"{american_call_prices[1]:.2f}\"],\n",
        "    [\"At the money call price\", f\"{american_call_prices[2]:.2f}\"],\n",
        "    [\"In the money call price\", f\"{american_call_prices[3]:.2f}\"],\n",
        "    [\"Deep in the money call price\", f\"{american_call_prices[4]:.2f}\"]\n",
        "]\n",
        "\n",
        "table = tabulate(table_data, headers=\"firstrow\", tablefmt=\"grid\")\n",
        "print(table)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XqnzRSQRfwNH"
      },
      "source": [
        "Options prices for American calls are the same as European calls, because is never optimal to exercise early an American call option."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vBSgbf4HisVl"
      },
      "source": [
        "### Q18"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c3S0jUOTwAkN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d17ca7a8-e7f8-40de-f40a-fe9826ebd784"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+---------------------------------+---------+\n",
            "| Option Type                     |   Price |\n",
            "+=================================+=========+\n",
            "| Deep out of the money put price |    0    |\n",
            "+---------------------------------+---------+\n",
            "| Out of the money put price      |    0.59 |\n",
            "+---------------------------------+---------+\n",
            "| At the money put price          |    3.39 |\n",
            "+---------------------------------+---------+\n",
            "| In the money put price          |    6.42 |\n",
            "+---------------------------------+---------+\n",
            "| Deep in the money put price     |   20    |\n",
            "+---------------------------------+---------+\n"
          ]
        }
      ],
      "source": [
        "from tabulate import tabulate\n",
        "\n",
        "american_put_prices = [trinomial_tree_price_american(S0, k, T, r, sigma, N, \"P\") for k in strikes]\n",
        "\n",
        "table_data = [\n",
        "    [\"Option Type\", \"Price\"],\n",
        "    [\"Deep out of the money put price\", f\"{american_put_prices[4]:.2f}\"],\n",
        "    [\"Out of the money put price\", f\"{american_put_prices[3]:.2f}\"],\n",
        "    [\"At the money put price\", f\"{american_put_prices[2]:.2f}\"],\n",
        "    [\"In the money put price\", f\"{american_put_prices[1]:.2f}\"],\n",
        "    [\"Deep in the money put price\", f\"{american_put_prices[0]:.2f}\"]\n",
        "]\n",
        "\n",
        "table = tabulate(table_data, headers=\"firstrow\", tablefmt=\"grid\")\n",
        "print(table)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CuGKxuMm02z-"
      },
      "source": [
        "No need to verify put-call parity for american options."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4CuMIHz_MXjM"
      },
      "source": [
        "**Q19**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vkIpzuBNXiEa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 471
        },
        "outputId": "566e65ed-f5bf-473b-d3b1-40d21bb6e728"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Question 19: Graph of European call and put prices versus stock price.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "print(\"Question 19: Graph of European call and put prices versus stock price.\")\n",
        "\n",
        "# Stock price\n",
        "stock_price = S0\n",
        "\n",
        "# Plot the call and put prices against the stock price\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot([stock_price]*len(call_prices), call_prices, 'ro', label='European Call')\n",
        "plt.plot([stock_price]*len(put_prices), put_prices, 'go', label='European Put')\n",
        "plt.xlabel('Stock Price')\n",
        "plt.ylabel('Option Price')\n",
        "plt.title('European Call and Put Prices Vs Stock Price')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F38yJPOciZWj"
      },
      "source": [
        "#### **Q20:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3yYFfRWFe6gB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 471
        },
        "outputId": "8d6ebde6-5544-469e-dc22-8776df208615"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Question 20: Graph of American call and put prices versus stock price.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "print(\"Question 20: Graph of American call and put prices versus stock price.\")\n",
        "\n",
        "# Stock price\n",
        "stock_price = S0\n",
        "\n",
        "# Plot the call and put prices against the stock price\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot([stock_price]*len(american_call_prices), american_call_prices, 'ro', label='American Call')\n",
        "plt.plot([stock_price]*len(american_put_prices), put_prices, 'go', label='American Put')\n",
        "plt.xlabel('Stock Price')\n",
        "plt.ylabel('Option Price')\n",
        "plt.title('American Call and Put Prices Vs Stock Price')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bpTAvi3SjRUA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 422
        },
        "outputId": "879dee5e-d330-45ce-a5a3-dcc5b85a6e41"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Question 21: Graph of European and American call prices versus strike.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f783d7364a0>"
            ]
          },
          "metadata": {},
          "execution_count": 243
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "print(\"Question 21: Graph of European and American call prices versus strike.\")\n",
        "# Question 21: Graph European and American call prices versus strike\n",
        "american_call_prices = american_call_prices\n",
        "european_call_prices = call_prices\n",
        "strikes = strikes\n",
        "plt.plot(strikes, european_call_prices, color='blue', label='European Call Prices')\n",
        "plt.scatter(strikes, american_call_prices, color='red', label='American Call Prices')\n",
        "plt.xlabel('Strike Price')\n",
        "plt.ylabel('European & American Call Prices')\n",
        "plt.title('Graph of European and American call Vs Strikes')\n",
        "plt.legend()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "alfKksJkDoLy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 413
        },
        "outputId": "34b05bdc-526a-4971-dc31-4bf44383d7c2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Question 22: Graph of European and American put prices versus strike.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f783dab9630>"
            ]
          },
          "metadata": {},
          "execution_count": 244
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "print(\"Question 22: Graph of European and American put prices versus strike.\")\n",
        "# Question 22: European and American put prices versus strike\n",
        "american_put_prices = american_put_prices\n",
        "european_put_prices = put_prices\n",
        "strikes = strikes\n",
        "plt.plot(strikes, european_put_prices, color='blue', label='European Put Prices')\n",
        "plt.plot(strikes, american_put_prices, color='red', label='American Put Prices')\n",
        "plt.xlabel('Strike Price')\n",
        "plt.ylabel('European & American Put Prices')\n",
        "plt.title('Graph of European and American Put Vs Strikes')\n",
        "plt.legend()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9GlFv0QbDoYy"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "atMNEIBNnDrx"
      },
      "source": [
        "#### **Question 23**\n",
        "\n",
        "Since put-call parity holds for different strikes of the European option, we  can say that the options market is pricing the options in a consistent manner and that there are no arbitrage opportunities available based on deviations from put-call parity. Furthermore, it provides a benchmark for evaluating the fairness of options prices and can be used for options pricing, risk management, and trading strategies."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QJH4hbPsDolD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c4fbf704-bc00-4b1c-de9b-8d354ebbae74"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Put-call parity is satisfied for strike 120: True\n",
            "Put-call parity is satisfied for strike 105: True\n",
            "Put-call parity is satisfied for strike 100: True\n",
            "Put-call parity is satisfied for strike 90: True\n",
            "Put-call parity is satisfied for strike 70: True\n"
          ]
        }
      ],
      "source": [
        "# Check put-call parity\n",
        "for k, call, put in zip(strikes, call_prices, put_prices):\n",
        "  left = call + k * np.exp(-r * T)\n",
        "  right = put + S0\n",
        "  print(f'Put-call parity is satisfied for strike {k}: {round(left, 2) == round(right, 2)}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f3Jt-knEsax4"
      },
      "source": [
        "#### **Question 24**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NK0v8iclDowx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "059e9f55-0d38-45fe-bc62-d44af3c170f4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Put-call parity is satisfied for strike 120: False\n",
            "Put-call parity is satisfied for strike 105: False\n",
            "Put-call parity is satisfied for strike 100: False\n",
            "Put-call parity is satisfied for strike 90: False\n",
            "Put-call parity is satisfied for strike 70: False\n"
          ]
        }
      ],
      "source": [
        "# Check put-call parity\n",
        "for k, call, put in zip(strikes, american_call_prices, american_put_prices):\n",
        "  left = call + k ** np.exp(-r * T)\n",
        "  right = put + S0\n",
        "  print(f'Put-call parity is satisfied for strike {k}: {round(left, 2) == round(right, 2)}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fI6WLRM76GVP"
      },
      "source": [
        "## Step 3"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yB3LfOOJE1Vm"
      },
      "source": [
        "**Q25**\n",
        "\n",
        "a) & b)  see document copy\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xyl9_AL6J-Ar"
      },
      "source": [
        "**Q26**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pRoBL8VSKaeB"
      },
      "outputs": [],
      "source": [
        "# Define the parameters\n",
        "\n",
        "N_1 = 25\n",
        "S0_1 = 180\n",
        "K_1 = 182\n",
        "T_1 = 6/12\n",
        "r_1 = 0.02\n",
        "sigma_1 = 0.25\n",
        "path = 'd_1' * N_1  # Path for delta hedging"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oeKJygFVJ8f_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "41918da0-3ed1-4fcd-c2f4-977f21a3d52a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "American Put Option Price: 13.01\n",
            "\n",
            "Delta Hedging at Each Node:\n",
            "[[ 0.07  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.09 -0.47  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.12 -0.56 -0.39  0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.14 -0.65 -0.48 -0.32  0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.18 -0.73 -0.57 -0.39 -0.24  0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.21 -0.81 -0.66 -0.48 -0.31 -0.18  0.    0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.25 -0.88 -0.75 -0.57 -0.39 -0.23 -0.12  0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.29 -0.94 -0.83 -0.67 -0.48 -0.31 -0.17 -0.08  0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.34 -0.98 -0.9  -0.76 -0.58 -0.39 -0.23 -0.11 -0.04  0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.39 -1.   -0.96 -0.84 -0.68 -0.49 -0.3  -0.16 -0.07 -0.02  0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.44 -1.   -0.98 -0.91 -0.78 -0.59 -0.39 -0.22 -0.1  -0.04 -0.01  0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.49 -1.   -1.   -0.97 -0.86 -0.7  -0.49 -0.29 -0.14 -0.06 -0.02 -0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.55 -1.   -1.   -1.   -0.94 -0.8  -0.6  -0.39 -0.21 -0.09 -0.03 -0.01\n",
            "  -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.6  -1.   -1.   -1.   -0.97 -0.88 -0.71 -0.5  -0.29 -0.13 -0.04 -0.01\n",
            "  -0.   -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.66 -1.   -1.   -1.   -1.   -0.95 -0.82 -0.62 -0.39 -0.19 -0.07 -0.02\n",
            "  -0.   -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.72 -1.   -1.   -1.   -1.   -1.   -0.9  -0.74 -0.5  -0.28 -0.11 -0.03\n",
            "  -0.01 -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.78 -1.   -1.   -1.   -1.   -1.   -0.96 -0.84 -0.63 -0.38 -0.17 -0.06\n",
            "  -0.01 -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.84 -1.   -1.   -1.   -1.   -1.   -1.   -0.93 -0.76 -0.51 -0.26 -0.09\n",
            "  -0.02 -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.91 -1.   -1.   -1.   -1.   -1.   -1.   -1.   -0.87 -0.65 -0.38 -0.15\n",
            "  -0.04 -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.98 -1.   -1.   -1.   -1.   -1.   -1.   -1.   -0.96 -0.8  -0.52 -0.24\n",
            "  -0.07 -0.01  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 1.05 -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -0.92 -0.68 -0.37\n",
            "  -0.12 -0.02  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 1.12 -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -0.84 -0.54\n",
            "  -0.21 -0.04  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 1.2  -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -0.95 -0.73\n",
            "  -0.35 -0.07  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 1.28 -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -0.91\n",
            "  -0.56 -0.15  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 1.36 -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.\n",
            "  -0.82 -0.31  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 1.45 -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.\n",
            "  -1.   -0.65  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]]\n",
            "\n",
            "Cash Account at Each Node:\n",
            "[[   -792.37       0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  -1218.85    -868.46       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  -1932.73   -1360.8     -529.05       0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  -3164.72   -2209.04    -807.97    -324.94       0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  -5348.86   -3724.53   -1273.25    -486.66    -199.09       0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  -9305.14   -6524.22   -2079.51    -747.88    -294.68    -120.05\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [ -16575.54  -11847.43   -3529.05   -1186.05    -444.62    -177.19\n",
            "      -70.07       0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [ -30012.99  -22199.42   -6224.33   -1950.      -688.19    -264.74\n",
            "     -104.14     -38.81       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [ -53988.03  -42630.14  -11381.35   -3332.25   -1099.31    -402.9\n",
            "     -155.61     -58.64     -19.89       0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [ -96197.9   -82040.01  -21471.06   -5917.38   -1821.1     -628.77\n",
            "     -235.09     -88.58     -30.86      -9.14       0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [-169039.25 -157828.18  -40966.15  -10882.93   -3136.67   -1012.72\n",
            "     -361.45    -134.34     -47.64     -14.69      -3.6        0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [-286865.29 -301424.88  -78877.84  -20595.19   -5614.31   -1691.86\n",
            "     -569.61    -205.7      -73.42     -23.43      -6.05      -1.14\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [ -82154.13 -564113.56 -150707.27  -39384.43  -10401.04   -2938.71\n",
            "     -926.35    -320.18    -113.39     -37.15     -10.07      -2.02\n",
            "       -0.26       0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  16310.72 -180950.16 -282106.43  -75315.95  -19627.3    -5300.1\n",
            "    -1562.83    -510.5     -176.52     -58.7      -16.64      -3.54\n",
            "       -0.48      -0.03       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  10891.23   40600.84  -90450.28 -141044.17  -37602.77   -9868.42\n",
            "    -2740.89    -839.8     -278.98     -92.78     -27.29      -6.16\n",
            "       -0.9       -0.06       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [   6027.71   31649.26   20367.43  -45180.03  -70482.47  -18736.11\n",
            "    -4983.95   -1433.13    -451.2     -147.52     -44.53     -10.63\n",
            "       -1.67      -0.13       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [   2970.69   21141.84   15887.8    10248.79  -22533.58  -35185.07\n",
            "    -9296.39   -2540.69    -752.56    -237.7      -72.54     -18.23\n",
            "       -3.07      -0.25       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [   1291.94   13074.92   10630.01    8005.96    5189.64  -11203.47\n",
            "   -17535.05   -4656.88   -1301.3     -391.46    -118.58     -31.06\n",
            "       -5.63      -0.5        0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [    483.51    7728.87    6593.03    5373.97    4065.58    2661.33\n",
            "    -5533.71   -8703.67   -2331.84    -664.32    -196.01     -52.73\n",
            "      -10.26      -0.98       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [    145.57    4442.97    3917.1     3352.7     2746.94    2096.8\n",
            "     1399.02   -2695.16   -4283.29   -1167.08    -330.52     -89.62\n",
            "      -18.59      -1.96       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [     22.69    2513.43    2271.72    2012.29    1733.86    1435.02\n",
            "     1114.29     770.06   -1273.47   -2112.28    -573.14    -153.55\n",
            "      -33.52      -3.89       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [     -3.38    1414.25    1304.85    1187.43    1061.41     926.16\n",
            "      781.       625.2      457.98    -559.61   -1023.15    -267.59\n",
            "      -60.38      -7.73       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [      6.67     801.23     753.38     702.03     646.91     587.75\n",
            "      524.27     456.13     382.99     304.5     -199.72    -477.25\n",
            "     -109.22     -15.38       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [     23.59     464.42     445.15     424.47     402.27     378.45\n",
            "      352.88     325.43     295.98     264.37     230.44     -20.4\n",
            "     -199.77     -30.57       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [     39.02     281.19     275.14     268.64     261.66     254.17\n",
            "      246.14     237.51     228.25     218.32     207.65     196.21\n",
            "       72.09     -60.78       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [      0.       182.       182.       182.       182.       182.\n",
            "      182.       182.       182.       182.       182.       182.\n",
            "      182.       120.89       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]]\n"
          ]
        }
      ],
      "source": [
        "def american_option_delta(S0_1, K_1, T_1, r_1, sigma_1, N_1, path):\n",
        "    dt_1 = T_1 / N_1  # Define time step\n",
        "    u_1 = np.exp(sigma_1 * np.sqrt(dt_1))  # Define u\n",
        "    d_1 = np.exp(-sigma_1 * np.sqrt(dt_1))  # Define d\n",
        "    p_1 = (np.exp(r_1 * dt_1) - d_1) / (u_1 - d_1)  # risk-neutral probabilities\n",
        "    P_1 = np.zeros([N_1 + 1, N_1 + 1])  # put prices\n",
        "    S_1 = np.zeros([N_1 + 1, N_1 + 1])  # underlying price\n",
        "    Delta = np.zeros([N_1 + 1, N_1 + 1])  # delta\n",
        "    Cash = np.zeros([N_1 + 1, N_1 + 1])  # cash account\n",
        "\n",
        "    for i in range(0, N_1 + 1):\n",
        "        S_1[N_1, i] = S0_1 * (u_1 ** (i)) * (d_1 ** (N_1 - i))\n",
        "        P_1[N_1, i] = max(K_1 - S_1[N_1, i], 0)  # Payoff at expiration\n",
        "        Delta[N_1, i] = (P_1[N_1, i] - P_1[N_1, i-1]) / (S_1[N_1, i] - S_1[N_1, i-1])  # Delta at expiration\n",
        "        Cash[N_1, i] = P_1[N_1, i] - Delta[N_1, i] * S_1[N_1, i]  # Cash account at expiration\n",
        "\n",
        "    for j in range(N_1 - 1, -1, -1):\n",
        "        for i in range(0, j + 1):\n",
        "            P_1[j, i] = np.exp(-r_1 * dt_1) * (\n",
        "                p_1 * P_1[j + 1, i + 1] + (1 - p_1) * P_1[j + 1, i]\n",
        "            )  # Computing the American put option prices\n",
        "            S_1[j, i] = S0_1 * (u_1 ** (i)) * (d_1 ** (j - i))  # Underlying evolution for each node\n",
        "\n",
        "            # Early exercise check\n",
        "            if path[j] == 'd':\n",
        "                P_1[j, i] = max(P_1[j, i], K_1 - S_1[j, i])\n",
        "\n",
        "            Delta[j, i] = (P_1[j, i] - P_1[j, i-1]) / (S_1[j, i] - S_1[j, i-1])  # Delta at each node\n",
        "            Cash[j, i] = np.exp(-r_1 * dt_1) * (\n",
        "                Delta[j, i] * S_1[j, i] + (1 - Delta[j, i]) * Cash[j + 1, i + 1]\n",
        "            )  # Cash account at each node\n",
        "\n",
        "    return P_1[0, 0], Delta, Cash\n",
        "\n",
        "put_price, delta, cash = american_option_delta(S0_1, K_1, T_1, r_1, sigma_1, N_1, path)\n",
        "\n",
        "print(\"American Put Option Price: {:.2f}\".format(put_price))\n",
        "print(\"\\nDelta Hedging at Each Node:\")\n",
        "np.set_printoptions(precision=2, suppress=True)\n",
        "print(delta)\n",
        "print(\"\\nCash Account at Each Node:\")\n",
        "print(cash)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "luMNo68fydCe"
      },
      "source": [
        "**Q27**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6Z-F549mygc4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "06c27328-85a9-4907-b57d-1dfd7a327271"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Asian ATM Put Option Price: 11.86\n",
            "\n",
            "Delta Hedging at Each Node:\n",
            "[[ 0.07  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.08 -0.44  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.11 -0.52 -0.37  0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.13 -0.61 -0.45 -0.29  0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.16 -0.69 -0.53 -0.36 -0.22  0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.2  -0.77 -0.62 -0.45 -0.29 -0.16  0.    0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.23 -0.84 -0.71 -0.54 -0.36 -0.21 -0.11  0.    0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.28 -0.9  -0.79 -0.63 -0.45 -0.28 -0.15 -0.07  0.    0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.32 -0.94 -0.86 -0.72 -0.54 -0.36 -0.2  -0.1  -0.04  0.    0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.37 -0.97 -0.91 -0.8  -0.64 -0.45 -0.27 -0.14 -0.06 -0.02  0.    0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.42 -0.99 -0.95 -0.87 -0.74 -0.55 -0.36 -0.19 -0.09 -0.03 -0.01  0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.47 -0.99 -0.98 -0.93 -0.82 -0.66 -0.46 -0.27 -0.13 -0.05 -0.01 -0.\n",
            "   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.52 -1.   -0.99 -0.96 -0.89 -0.76 -0.56 -0.35 -0.18 -0.07 -0.02 -0.\n",
            "  -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.58 -1.   -1.   -0.99 -0.94 -0.84 -0.67 -0.46 -0.26 -0.11 -0.04 -0.01\n",
            "  -0.   -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.63 -1.   -1.   -1.   -0.98 -0.91 -0.78 -0.57 -0.35 -0.17 -0.06 -0.02\n",
            "  -0.   -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.69 -1.   -1.   -1.   -0.99 -0.96 -0.87 -0.69 -0.46 -0.24 -0.1  -0.03\n",
            "  -0.   -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.75 -1.   -1.   -1.   -1.   -0.99 -0.93 -0.8  -0.59 -0.34 -0.15 -0.05\n",
            "  -0.01 -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.82 -1.   -1.   -1.   -1.   -1.   -0.98 -0.9  -0.72 -0.47 -0.23 -0.08\n",
            "  -0.02 -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.88 -1.   -1.   -1.   -1.   -1.   -1.   -0.96 -0.84 -0.61 -0.33 -0.13\n",
            "  -0.03 -0.    0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 0.95 -1.   -1.   -1.   -1.   -1.   -1.   -0.99 -0.93 -0.75 -0.47 -0.2\n",
            "  -0.05 -0.01  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 1.02 -1.   -1.   -1.   -1.   -1.   -1.   -1.   -0.98 -0.88 -0.63 -0.32\n",
            "  -0.1  -0.01  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 1.1  -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -0.96 -0.8  -0.47\n",
            "  -0.17 -0.03  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 1.17 -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -0.93 -0.67\n",
            "  -0.29 -0.06  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 1.25 -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -0.87\n",
            "  -0.48 -0.12  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 1.34 -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.\n",
            "  -0.74 -0.24  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]\n",
            " [ 1.42 -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.   -1.\n",
            "  -1.   -0.49  0.    0.    0.    0.    0.    0.    0.    0.    0.    0.\n",
            "   0.    0.  ]]\n",
            "\n",
            "Cash Account at Each Node:\n",
            "[[   -673.69       0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  -1024.07    -734.23       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  -1601.75   -1134.97    -451.91       0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  -2583.21   -1813.62    -682.68    -279.47       0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  -4295.83   -3004.31   -1061.59    -415.18    -171.78       0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  -7349.43   -5163.06   -1707.08    -631.34    -252.91    -103.52\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [ -12875.5    -9189.42   -2846.97    -988.33    -378.68    -152.39\n",
            "      -60.17       0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [ -22945.88  -16868.55   -4927.28   -1600.45    -580.18    -226.59\n",
            "      -89.38     -33.05       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [ -41267.83  -31738.52   -8830.63   -2689.06    -915.12    -342.37\n",
            "     -133.28     -50.02     -16.74       0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [ -74250.22  -60751.09  -16308.12   -4689.73   -1493.61    -529.13\n",
            "     -200.51     -75.58     -26.05      -7.58       0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [-132412.13 -117346.85  -30812.78   -8466.13   -2530.35    -841.85\n",
            "     -306.23    -114.46     -40.3      -12.22      -2.93       0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [-231461.59 -226846.36  -59049.42  -15727.09   -4449.75   -1386.37\n",
            "     -478.11    -174.64     -62.17     -19.56      -4.94      -0.91\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [-119538.79 -434690.89 -113690.41  -29808.35   -8093.44   -2370.48\n",
            "     -768.39    -270.19     -95.96     -31.1       -8.26      -1.61\n",
            "       -0.2        0.         0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  15548.98 -249549.28 -217508.68  -57046.09  -15114.18   -4206.3\n",
            "    -1278.47    -427.01    -148.97     -49.22     -13.69      -2.84\n",
            "       -0.38      -0.02       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [  10924.24   36522.83 -124774.49 -108859.14  -28673.48   -7707.95\n",
            "    -2208.87    -694.5     -234.17     -77.81     -22.53      -4.95\n",
            "       -0.7       -0.05       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [   6254.03   29609.43   18327.6   -62359.64  -54498.25  -14446.77\n",
            "    -3957.42   -1169.51    -375.64    -123.48     -36.85      -8.58\n",
            "       -1.31      -0.09       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [   3162.62   20121.52   14867.48    9228.47  -31137.16  -27293.18\n",
            "    -7300.1    -2044.53    -619.85    -198.06     -60.09     -14.76\n",
            "       -2.41      -0.19       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [   1438.95   12564.56   10119.65    7495.6     4679.28  -15517.04\n",
            "   -13672.12   -3699.03   -1058.82    -323.74     -98.15     -25.23\n",
            "       -4.43      -0.38       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [    582.96    7473.59    6337.75    5118.69    3810.3     2406.05\n",
            "    -7701.15   -6846.53   -1875.52    -543.92    -161.66     -42.92\n",
            "       -8.09      -0.75       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [    202.74    4315.28    3789.41    3225.01    2619.25    1969.11\n",
            "     1271.33   -3788.87   -3420.94    -945.19    -270.85     -72.95\n",
            "      -14.7       -1.48       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [     57.6     2449.56    2207.84    1948.42    1669.99    1371.15\n",
            "     1050.42     706.19   -1829.12   -1697.12    -465.72    -124.68\n",
            "      -26.57      -2.95       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [     17.28    1382.3     1272.9     1155.48    1029.46     894.21\n",
            "      749.05     593.25     426.03    -845.99    -825.95    -216.14\n",
            "      -47.9       -5.86       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [     17.62     785.25     737.4      686.04     630.93     571.77\n",
            "      508.29     440.14     367.01     288.52    -351.37    -383.26\n",
            "      -86.55     -11.65       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [     29.82     456.43     437.16     416.47     394.28     370.45\n",
            "      344.88     317.44     287.99     256.38     222.45    -101.22\n",
            "     -157.85     -23.16       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [     42.51     277.2      271.14     264.64     257.66     250.17\n",
            "      242.14     233.51     224.26     214.32     203.66     192.21\n",
            "       26.32     -46.05       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]\n",
            " [      0.       180.       180.       180.       180.       180.\n",
            "      180.       180.       180.       180.       180.       180.\n",
            "      180.        91.59       0.         0.         0.         0.\n",
            "        0.         0.         0.         0.         0.         0.\n",
            "        0.         0.  ]]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "N_1 = 25\n",
        "S0_1 = 180\n",
        "K_1 = 180\n",
        "T_1 = 6 / 12\n",
        "r_1 = 0.02\n",
        "sigma_1 = 0.25\n",
        "path = 'd_1' * N_1  # Path for delta hedging\n",
        "\n",
        "def asian_atm_option_delta(S0_1, K_1, T_1, r_1, sigma_1, N_1, path):\n",
        "    dt_1 = T_1 / N_1  # Define time step\n",
        "    u_1 = np.exp(sigma_1 * np.sqrt(dt_1))  # Define u\n",
        "    d_1 = np.exp(-sigma_1 * np.sqrt(dt_1))  # Define d\n",
        "    p_1 = (np.exp(r_1 * dt_1) - d_1) / (u_1 - d_1)  # risk-neutral probabilities\n",
        "    P_1 = np.zeros([N_1 + 1, N_1 + 1])  # put prices\n",
        "    S_1 = np.zeros([N_1 + 1, N_1 + 1])  # underlying price\n",
        "    Delta = np.zeros([N_1 + 1, N_1 + 1])  # delta\n",
        "    Cash = np.zeros([N_1 + 1, N_1 + 1])  # cash account\n",
        "\n",
        "    for i in range(0, N_1 + 1):\n",
        "        S_1[N_1, i] = S0_1 * (u_1 ** (i)) * (d_1 ** (N_1 - i))\n",
        "        P_1[N_1, i] = max(K_1 - S_1[N_1, i], 0)  # Payoff at expiration\n",
        "        Delta[N_1, i] = (P_1[N_1, i] - P_1[N_1, i-1]) / (S_1[N_1, i] - S_1[N_1, i-1])  # Delta at expiration\n",
        "        Cash[N_1, i] = P_1[N_1, i] - Delta[N_1, i] * S_1[N_1, i]  # Cash account at expiration\n",
        "\n",
        "    for j in range(N_1 - 1, -1, -1):\n",
        "        for i in range(0, j + 1):\n",
        "            S_1[j, i] = S0_1 * (u_1 ** (i)) * (d_1 ** (j - i))  # Underlying evolution for each node\n",
        "\n",
        "            avg_price = np.mean(S_1[j+1, :i+1])  # Calculate average underlying price\n",
        "\n",
        "            P_1[j, i] = np.exp(-r_1 * dt_1) * (\n",
        "                p_1 * P_1[j + 1, i + 1] + (1 - p_1) * P_1[j + 1, i]\n",
        "            )  # Computing the option prices\n",
        "\n",
        "            Delta[j, i] = (P_1[j, i] - P_1[j, i-1]) / (S_1[j, i] - S_1[j, i-1])  # Delta at each node\n",
        "            Cash[j, i] = np.exp(-r_1 * dt_1) * (\n",
        "                Delta[j, i] * S_1[j, i] + (1 - Delta[j, i]) * Cash[j + 1, i + 1]\n",
        "            )  # Cash account at each node\n",
        "\n",
        "    return P_1[0, 0], Delta, Cash\n",
        "\n",
        "put_price, delta, cash = asian_atm_option_delta(S0_1, K_1, T_1, r_1, sigma_1, N_1, path)\n",
        "\n",
        "print(\"Asian ATM Put Option Price: {:.2f}\".format(put_price))\n",
        "print(\"\\nDelta Hedging at Each Node:\")\n",
        "np.set_printoptions(precision=2, suppress=True)\n",
        "print(delta)\n",
        "print(\"\\nCash Account at Each Node:\")\n",
        "print(cash)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qYOFY9Sa3Trr"
      },
      "source": [
        "# *References:*\n",
        "\n",
        "\n",
        "\n",
        "1. Hull, J. C. (2018). Options, Futures, and Other Derivatives (10th ed.). Pearson.\n",
        "\n",
        "2. Investopedia. (n.d.). Put-Call Parity. Retrieved from https://www.investopedia.com/terms/p/putcallparity.asp"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}